# Required packages
import pandas as pd
import numpy as np
import networkx as nx
from sklearn.metrics.pairwise import cosine_similarity
from community import community_louvain
import matplotlib.pyplot as plt
from ipywidgets import widgets, Layout
from io import BytesIO

# File upload widget
upload_button = widgets.FileUpload(
    accept='.csv',
    multiple=False,
    description="Upload CSV",
    button_style='primary',
    layout=Layout(width='200px')
)
status_label = widgets.Label(value="Please upload a CSV file.")

# File processing function
def process_file(change):
    try:
        status_label.value = "Processing... Please wait."
        uploaded_file = list(upload_button.value.values())[0]
        data = pd.read_csv(BytesIO(uploaded_file['content']))

        # Binary column conversion
        binary_columns = ['live1deth0']
        for col in binary_columns:
            if col in data.columns:
                data[col] = data[col].apply(lambda x: 1 if x == 1 else 0)

        # Continuous column cleaning and imputation
        continuous_columns = [
            "Age", "Height (cm)", "Weight (kg)", "BMI", "Prostate vol.", "iPSA",
            "TST", "LH", "FSH", "ACTH", "Cor", "Glu",
            "Positive Biopsy Ratio (e.g., 2/16 cores = 216)",
            "Biopsy GS A", "Biopsy GS B", "Biopsy GS A+B", "cT",
            "Clinical Stage (cT)", "Discharge POD", "Catheter Removal POD",
            "RALP Console Time (min)", "RARP Surgery Time (min)",
            "RARP Anesthesia Time (min)", "Intraoperative Blood Loss",
            "Preoperative MRI Urethral Length (mm)",
            *[f"PSA POM{i}" for i in [1,3,6,9,12,15,18,24,30,36,48,60,72,84,96,108,120]]
        ]
        for col in continuous_columns:
            if col in data.columns:
                data[col] = pd.to_numeric(data[col], errors='coerce').fillna(data[col].mean())

        if 'pT' in data.columns:
            data['pT'] = pd.to_numeric(data['pT'], errors='coerce').fillna(0)

        # Extract only numerical data
        numeric_data = data.select_dtypes(include=[np.number])
        numeric_data = numeric_data.fillna(numeric_data.mean())

        # Check for missing values
        if numeric_data.isnull().any().any():
            raise ValueError("Missing values remain after cleaning.")

        # Compute cosine similarity
        similarity_matrix = cosine_similarity(numeric_data)

        # Create network graph
        G = nx.Graph()
        for i, node in enumerate(numeric_data.index):
            G.add_node(node, label=str(node))

        # Add edges based on threshold
        threshold = 0.3
        for i in range(len(numeric_data)):
            for j in range(i + 1, len(numeric_data)):
                if similarity_matrix[i, j] > threshold:
                    G.add_edge(numeric_data.index[i], numeric_data.index[j], weight=similarity_matrix[i, j])

        # Community detection
        partition = community_louvain.best_partition(G)
        nx.set_node_attributes(G, partition, "community")

        # Visualization
        node_colors = [partition[node] for node in G.nodes()]
        pos = nx.spring_layout(G)
        plt.figure(figsize=(14, 14))
        nx.draw_networkx_nodes(G, pos, node_color=node_colors, cmap=plt.cm.Set3, node_size=300)
        nx.draw_networkx_edges(G, pos, alpha=0.5, edge_color='gray')
        plt.title("Topological Network with Community Detection")
        plt.axis("off")
        plt.show()

        status_label.value = "Processing complete. Network graph generated."

    except Exception as e:
        status_label.value = f"Error processing file: {e}"

# Event binding
upload_button.observe(process_file, names='value')
widgets.VBox([upload_button, status_label])
